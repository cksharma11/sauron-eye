{"version":3,"sources":["serviceWorker.js","components/DashboardHeader/DashboardHeader.js","components/PusherInfo/PusherInfo.js","components/Pushers/Pushers.js","components/DashboardTable/DashboardTable.js","helpers/helpers.js","components/Dashboard/Dashboard.js","components/FailedTests/FailedTests.js","components/Report/Report.js","components/Reports/Reports.js","components/History/History.js","components/Router/Router.js","index.js"],"names":["Boolean","window","location","hostname","match","DashboardHeader","headings","map","heading","key","PusherInfo","pusher","name","sha","passed","total","project","to","href","Pushers","dashboard","i","DashboardTable","border","sortByTime","x","y","Date","time","Dashboard","sortedDashboard","pushers","Object","keys","length","console","log","sort","getSortedDashboard","className","FailedTests","failedSuites","failedTest","Report","detail","username","Reports","details","History","search","URLSearchParams","get","getUsername","App","useState","setPushers","useEffect","setInterval","a","async","fetch","then","res","json","gollumJiData","exact","path","component","bind","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0CCNSC,EAVS,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACzB,OACE,4BACGA,EAASC,KAAI,SAAAC,GAAO,OACnB,wBAAIC,IAAKD,GAAUA,QCaZE,EAhBI,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACZC,EAAsCD,EAAtCC,KAAMC,EAAgCF,EAAhCE,IAAKC,EAA2BH,EAA3BG,OAAQC,EAAmBJ,EAAnBI,MAAOC,EAAYL,EAAZK,QAClC,OACE,4BACE,4BACE,kBAAC,IAAD,CAAMC,GAAE,2BAAsBL,IAA9B,IAAwCA,IAE1C,4BACE,uBAAGM,KAAI,0CAAqCF,EAArC,YAAgDJ,EAAhD,mBAA+DC,IAAQA,IAEhF,sCAAQC,EAAR,YAAkBC,IAClB,oCCLSI,EANC,SAAC,GACf,OADiC,EAAhBC,UACAb,KAAI,SAACI,EAAQU,GAC5B,OAAO,kBAAC,EAAD,CAAYV,OAAQA,EAAQF,IAAG,UAAKE,GAAL,OAAcU,SCYzCC,EAbQ,SAAC,GAAmB,IAAjBF,EAAgB,EAAhBA,UACxB,OACE,2BAAOG,OAAO,KACZ,+BACE,kBAAC,EAAD,CACEjB,SAAU,CAAC,SAAU,MAAO,eAAgB,WAE9C,kBAAC,EAAD,CAASc,UAAWA,OCXtBI,EAAa,SAACC,EAAGC,GACrB,OAAO,IAAIC,KAAKD,EAAEE,MAAQ,IAAID,KAAKF,EAAEG,OCaxBC,EAVG,SAAC,GAAiB,IAC5BC,EDDmB,SAAAC,GAWzB,OAVkBC,OAAOC,KAAKF,GAASxB,KAAI,SAAAK,GACzC,IAAKmB,EAAQnB,GAAMsB,OACjB,MAAO,CAAEnB,MAAO,EAAGD,OAAQ,EAAGF,OAAMC,IAAK,IAAKG,QAAS,IAEzDmB,QAAQC,IAAI,SAAUL,EAAQnB,IAC9B,IAAMD,EAASoB,EAAQnB,GAAMyB,KAAKb,GAAY,GACtCV,EAAgCH,EAAhCG,OACR,MAAO,CAAEC,MAD+BJ,EAAxBI,MACAD,SAAQF,OAAMC,IADUF,EAAjBE,IACYG,QADKL,EAAZK,YAIbqB,MAAK,SAACZ,EAAGC,GAAJ,OAAUA,EAAEZ,OAASW,EAAEX,UCVrBwB,CADS,EAAdP,SAGnB,OACE,yBAAKQ,UAAU,aACb,kBAAC,EAAD,CAAgBnB,UAAWU,MCGlBU,EAVK,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACrB,OACE,wBAAIF,UAAU,0BACXE,EAAalC,KAAI,SAAAmC,GAAU,OAC1B,wBAAIjC,IAAKiC,GAAaA,QCOfC,EAVA,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,SAChBjB,EAA4BgB,EAA5BhB,KAAMf,EAAsB+B,EAAtB/B,IAAK4B,EAAiBG,EAAjBH,aACnB,OACE,yBAAKF,UAAU,UACb,qCAAOM,EAAP,cAAqBhC,EAArB,cAA8Be,IAC9B,kBAAC,EAAD,CAAaa,aAAcA,MCKlBK,EAVC,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,QAASF,EAAe,EAAfA,SAC1B,OACE,yBAAKN,UAAU,WACZQ,EAAQxC,KAAI,SAAAqC,GACX,OAAO,kBAAC,EAAD,CAAQA,OAAQA,EAAQC,SAAUA,EAAUpC,IAAKmC,SCIjDI,EAPC,SAAC,GAAiB,IAAfjB,EAAc,EAAdA,QACXc,ELaY,WAClB,IAAMI,EAAShD,OAAOC,SAAS+C,OAE/B,OADkB,IAAIC,gBAAgBD,GACrBE,IAAI,YKhBJC,GACXL,EAAUhB,EAAQc,GAExB,OAAO,kBAAC,EAAD,CAASE,QAASA,EAASF,SAAUA,KCkB/BQ,EAjBH,WAAO,IAAD,EACcC,mBAAS,IADvB,mBACTvB,EADS,KACAwB,EADA,KAShB,OAPAC,qBAAU,WACRC,aAAY,0BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MAPe,EAAAA,EAAAC,OAAA,kEAAAD,EAAA,MAChBE,MAAM,mCAAmCC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,WADzC,8EAOf,OACJC,EADI,OAEVT,EAAWS,GAFD,uCAGT,OACF,IAGD,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWtC,EAAUuC,U,EAAW,CAAErC,cACxD,kBAAC,IAAD,CAAOmC,KAAK,WAAWC,UAAWnB,EAAQoB,U,EAAW,CAAErC,gBCf7DsC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SZ6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMd,MAAK,SAAAe,GACjCA,EAAaC,kB","file":"static/js/main.fe120fba.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\n\nconst DashboardHeader = ({ headings }) => {\n  return (\n    <tr>\n      {headings.map(heading => (\n        <th key={heading}>{heading}</th>\n      ))}\n    </tr>\n  );\n};\n\nexport default DashboardHeader;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst PusherInfo = ({ pusher }) => {\n  const { name, sha, passed, total, project } = pusher;\n  return (\n    <tr>\n      <td>\n        <Link to={`history?username=${name}`}> {name}</Link>\n      </td>\n      <td>\n        <a href={`https://github.com/step-batch-7/${project}-${name}/commit/${sha}`}>{sha}</a>\n      </td>\n      <td>{`${passed}/${total}`}</td>\n      <td>--</td>\n    </tr>\n  );\n};\n\nexport default PusherInfo;\n","import React from \"react\";\nimport PusherInfo from \"../PusherInfo/PusherInfo\";\n\nconst Pushers = ({ dashboard }) => {\n  return dashboard.map((pusher, i) => {\n    return <PusherInfo pusher={pusher} key={`${pusher}${i}`} />;\n  });\n};\n\nexport default Pushers;\n","import React from \"react\";\nimport DashboardHeader from \"../DashboardHeader/DashboardHeader\";\nimport Pushers from \"../Pushers/Pushers\";\n\nconst DashboardTable = ({ dashboard }) => {\n  return (\n    <table border=\"1\">\n      <thead>\n        <DashboardHeader\n          headings={[\"Pusher\", \"SHA\", \"Passed/Total\", \"Graph\"]}\n        />\n        <Pushers dashboard={dashboard} />\n      </thead>\n    </table>\n  );\n};\n\nexport default DashboardTable;\n","const sortByTime = (x, y) => {\n  return new Date(y.time) - new Date(x.time);\n};\n\nconst getSortedDashboard = pushers => {\n  const dashboard = Object.keys(pushers).map(name => {\n    if (!pushers[name].length) {\n      return { total: 0, passed: 0, name, sha: \"-\", project: \"\" };\n    }\n    console.log(\"Before\", pushers[name])\n    const pusher = pushers[name].sort(sortByTime)[0];\n    const { passed, total, sha, project } = pusher;\n    return { total, passed, name, sha, project };\n  });\n\n  return dashboard.sort((x, y) => y.passed - x.passed);\n};\n\nconst getUsername = () => {\n  const search = window.location.search;\n  const urlParams = new URLSearchParams(search);\n  return urlParams.get(\"username\");\n};\n\nexport { getSortedDashboard, getUsername };\n","import React from \"react\";\nimport DashboardTable from \"../DashboardTable/DashboardTable\";\nimport { getSortedDashboard } from \"../../helpers/helpers\";\n\nconst Dashboard = ({ pushers }) => {\n  const sortedDashboard = getSortedDashboard(pushers);\n\n  return (\n    <div className=\"dashboard\">\n      <DashboardTable dashboard={sortedDashboard} />\n    </div>\n  );\n};\n\nexport default Dashboard;\n","import React from \"react\";\n\nconst FailedTests = ({ failedSuites }) => {\n  return (\n    <ul className=\"failed-cases-container\">\n      {failedSuites.map(failedTest => (\n        <li key={failedTest}>{failedTest}</li>\n      ))}\n    </ul>\n  );\n};\n\nexport default FailedTests;\n","import React from \"react\";\nimport FailedTests from \"../FailedTests/FailedTests\";\n\nconst Report = ({ detail, username }) => {\n  const { time, sha, failedSuites } = detail;\n  return (\n    <div className=\"report\">\n      <p>{`${username} | ${sha} | ${time}`}</p>\n      <FailedTests failedSuites={failedSuites} />\n    </div>\n  );\n};\n\nexport default Report;\n","import React from \"react\";\nimport Report from \"../Report/Report\";\n\nconst Reports = ({ details, username }) => {\n  return (\n    <div className=\"details\">\n      {details.map(detail => {\n        return <Report detail={detail} username={username} key={detail}/>;\n      })}\n    </div>\n  );\n};\n\nexport default Reports;\n","import React from \"react\";\nimport Reports from \"../Reports/Reports\";\nimport { getUsername } from \"../../helpers/helpers\";\n\nconst History = ({ pushers }) => {\n  const username = getUsername();\n  const details = pushers[username];\n\n  return <Reports details={details} username={username} />;\n};\n\nexport default History;\n","import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Dashboard from \"../Dashboard/Dashboard\";\nimport History from \"../History/History\";\n\nconst getPushersFromGollumJi = async () => {\n  return await fetch(\"https://gollum-ji.herokuapp.com\").then(res => res.json());\n};\n\nconst App = () => {\n  const [pushers, setPushers] = useState({});\n  useEffect(() => {\n    setInterval(async () => {\n      const gollumJiData = await getPushersFromGollumJi();\n      setPushers(gollumJiData);\n    }, 5000);\n  }, []);\n\n  return (\n    <Router>\n      <Route exact path=\"/\" component={Dashboard.bind(this, { pushers })} />\n      <Route path=\"/history\" component={History.bind(this, { pushers })} />\n    </Router>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./components/Router/Router\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}